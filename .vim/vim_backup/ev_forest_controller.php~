<?php
/**
 * 森のビアガーデンイベントメインコントローラ
 *
 * @author yoshikawa_kayoko_gn
 */
class EvForestController extends AppController {

    public $name = 'EvForest';

    var $layout = 'ev_forest';

    public $uses = array(
        'EvForestFacade',
        'EventMasterBundler',
        'MultiTransaction',
    );

    // ヘルパ
    public $helpers = array(
        'Pigg',
    );

    // イベントマスター
    public $eventMaster = null;

    // ユーザイベントステータス
    public $userEventStatus = null;

    // memcacheKey
    public $memcacheKey;

    // memcacheBonusStageKey
    public $memcacheBonusStageKey;

    // memcacheKeepAliveTime
    private $memcacheKeepAliveTime;

    /** 初回アクセスフラグ（基本FALSEのまま） */
    var $firstFlag = FALSE;

    /** ユーザのＩＤ */
    public $ownerId;

    public function beforeFilter() {
        parent::beforeFilter();

        $this->ownerId = $_GET[OPENSOCIAL_OWNER_ID];

        // memcacheKey
        $this->memcacheKey = $this->name . '_STEP5_' . $_GET[OPENSOCIAL_OWNER_ID];

        // memcacheBonusStageKey
        $this->memcacheBonusStageKey = $this->name . '_BONUS_STAGE_' . $_GET[OPENSOCIAL_OWNER_ID];

        // memcacheKeepAliveTime
        $this->memcacheKeepAliveTime = DAY;

        try {
            $this->MultiTransaction->begin();

            $data = array(
                'ownerId'         => $_GET[OPENSOCIAL_OWNER_ID],
                'eventMasterCode' => 'ev_forest',
                'targetDatetime'  => CURRENT_DATETIME,
            );
            $result = $this->EvForestFacade->beforeFilter($data);

            $this->MultiTransaction->commit();
        } catch (Exception $e) {
            $this->MultiTransaction->rollback();
            $this->log("file:" . __FILE__ . " function:" . __FUNCTION__ . " line:" . __LINE__ . $e);
            $this->accessError();
        }

        // 初期登録時
        if ($result['registFlag'] === true) {
            // 初回アクセスフラグＯＮ
            $this->firstFlag = TRUE;
            // 結果をmemcacheに保存
            $memcache = new Memcache();
            $memcache->addServer(MEMCACHE_MAIN_HOST, MEMCACHE_MAIN_PORT);
            $memcache->set($_GET[OPENSOCIAL_OWNER_ID] . '_first', $result['registFlag'], 0, DAY);
            // オープニングFlash
            $this->redirect_flash(Router::url(
                array(
                    'controller' => 'flash',
                    'action'     => 'callbackFlash',
                    'file_name'  => 'events/' . $result['eventMaster']['EventMaster']['code'] . '/opening.swf',
                    'dest_url'   => BarUtil::serializeUrlencode($result['eventMaster']['EventMaster']['code'] . '/index/1/'),
                )
            ));
        }

        $this->eventMaster         = $result['eventMaster'];
        $this->userEventStatus     = $result['userEventStatus'];
        $this->userStatusModelName = $result['userStatusModelName'];
        $this->userBarrels         = $result['userBarrels'];
        $this->set('userStatusModelName',    $this->userStatusModelName);
        $this->set('eventMasterCode',        $this->eventMaster['EventMaster']['code']);
        $this->set('eventMasterId',          $this->eventMaster['EventMaster']['id']);
        $this->set('parentStageCocktailIds', $result['parentStageCocktailIds']);

        // イベント開始日
        $dt = new DateTime($this->eventMaster['EventMaster']['start_datetime']);
        $this->set('eventStartDate',    $dt->format("n/j"));
        // イベント終了日時
        $dt = new DateTime($this->eventMaster['EventMaster']['end_datetime']);
        $this->set('eventEndDatetime',      $dt->format("n/j H時i分"));
        $this->set('eventEndDate',      $dt->format("n月j日 H時"));

    }

    /**
     *
     * トップページ
     */
    public function index($registFlag = false) {

        try {
            // イベント開催中かどうか
            $rankingFlag = $this->EvForestFacade->getRankingFlag($this->eventMaster['EventMaster']['id']);
            $this->set('rankingFlag', $rankingFlag);

            // 順位の情報一式
            $result = $this->EvForestFacade->getUserTotalRanking(
                    array(
                            'ownerId'        => $this->ownerId,
                            'eventMasterId'  => $this->eventMaster['EventMaster']['id'],
                            'targetDatetime' => CURRENT_DATETIME,
                    )
            );
            // ランキング開始したかどうか
            $this->set('isDuringTotalRankingDisplay', $result['isDuringTotalRankingDisplay']);
            $this->set('userRank',                    $result['userRank']);
            $this->set('totalUserCount',              $result['totalUserCount']);

            // スペシャルステージの判定
            $data = array(
                    'ownerId' => $this->ownerId,
                    'targetDatetime' => CURRENT_DATETIME,
            );
            $isJudgmentSpecialStage = $this->EventMasterBundler->isJudgmentSpecialStage($data);
            $data = array(
                    'eventMasterId' =>$this->eventMaster['EventMaster']['id'],
                    'targetDatetime' => CURRENT_DATETIME,
            );
            $isDuringSpecialStage = $this->EvForestFacade->isDuringSpecialStage($data);
            $this->set('isJudgmentSpecialStage', $isJudgmentSpecialStage);
            $this->set('isDuringSpecialStage', $isDuringSpecialStage);
            $this->set('userEventStatus',                $this->userEventStatus);

            // ボーナスアイテム追加の判定
            $data = array(
                    'eventMasterId'  => $this->eventMaster['EventMaster']['id'],
                    'targetDatetime' => CURRENT_DATETIME,
            );
            $isDuringBonusItem = $this->EvForestFacade->isDuringBonusItem($data);
            $this->set('isDuringBonusItem', $isDuringBonusItem);
            $isDuringEarlyComp = $this->EvForestFacade->isDuringEarlyComp($data);
            $this->set('isDuringEarlyComp', $isDuringEarlyComp);

            // Feedを取得
            // 今回ＴＯＰにＦｅｅｄないらしい...
            //$feeds = $this->EvForestFacade->getFeeds($this->eventMaster['EventMaster']['id'], $this->userEventStatus);
            //$this->set('feeds', $feeds);

            // 初回アクセスかどうか
            // --------------------
            // 結果をmemcacheから取得
            $memcache = new Memcache();
            $memcache->addServer(MEMCACHE_MAIN_HOST, MEMCACHE_MAIN_PORT);
            $result = $memcache->get($_GET[OPENSOCIAL_OWNER_ID] . '_first');
            $this->set('registFlag',$result);
            $memcache->delete($_GET[OPENSOCIAL_OWNER_ID] . '_first', 0);

            // スペシャルガチャ(ウェディングカー)投入済みか
            $data = array(
                    'eventMasterId' => $this->eventMaster['EventMaster']['id'],
                    'type' => 'special_gacha',
            );
            $isStartedSpecialGacha = $this->EvForestFacade->isStartedSpecialGacha($data);
            $this->set('isStartedSpecialGacha', $isStartedSpecialGacha);
        } catch (Exception $e) {
            $this->MultiTransaction->rollback();
            $this->log("file:" . __FILE__ . " function:" . __FUNCTION__ . " line:" . __LINE__ . $e);
            $this->accessError();
        }

        if ( FALSE == $rankingFlag ) {
        	// ボーナスステージの成功数
        	$this->set('bonusStageSuccessCount', $this->userEventStatus[$this->userStatusModelName]['bonus_stage_success_count']);
            // 受け取るアイテムがあるかどうか
            $this->set('isIncentive',  $this->EvForestFacade->isIncentive($this->ownerId));
            // イベント終了時は別ctpに
            $this->render('index_after');
        }
    }

    /**
     * マイページ
     *
     */
    public function my_page($registFlag = false) {
        // イベント開催中かをチェックする．
        if (EVENT_OPEN_FLAG === false) {
            $this->redirect(
                array(
                    'action' => 'index',
                )
            );
        }

        try {
            $data = array(
                'userEventStatus' => $this->userEventStatus,
                'eventMaster'     => $this->eventMaster,
                'targetDatetime'  => CURRENT_DATETIME,
                'userBarrels'     =>  $this->userBarrels,
            );
            $result = $this->EvForestFacade->my_page($data);

            // Feedを取得
            $feeds = $this->EvForestFacade->getFeeds($this->eventMaster['EventMaster']['id'], $this->userEventStatus);
            $this->set('feeds', $feeds);

        } catch (Exception $e) {
            $this->log("file:" . __FILE__ . " function:" . __FUNCTION__ . " line:" . __LINE__ . $e);
            $this->redirect(array('action' => 'error'));
        }

        $this->set('selloutEventItemFlag',           $result['selloutEventItemFlag']);
        $this->set('userEventStatus',                $result['userEventStatus']);
        $this->set('eventMaster',                    $result['eventMaster']);
        $this->set('productionCocktail',             $result['productionCocktail']);
        $this->set('testProductionCocktail',         $result['testProductionCocktail']);
        $this->set('learnCocktailRemainderPoint',    $result['learnCocktailRemainderPoint']);
        $this->set('userCocktailIds',                $result['userCocktailIds']);
        $this->set('userMaterialItem1',              $result['userMaterialItem1']);
        $this->set('userMaterialItem2',              $result['userMaterialItem2']);
        $this->set('userShorteningItem',             $result['userShorteningItem']);
        $this->set('userPointUpItems',               $result['userPointUpItems']);
        $this->set('userBonusStageCheatItem',        $result['userBonusStageCheatItem']);
        $this->set('bonusStageSuccessCount',         $result['bonusStageSuccessCount']);
        $this->set('remainderParentStageClearCount', $result['remainderParentStageClearCount']);
        $this->set('userBarrels',                    $result['userBarrels']);

        $this->render($result['view']);
    }

    /**
     *
     * カクテル作成ステップ1
     */
    public function cocktail_make_step1() {
        // パラメータをチェックする．
        if (empty($this->params['url']['barrelNumber'])) {
            $this->log("file:" . __FILE__ . " function:" . __FUNCTION__ . " line:" . __LINE__);
            $this->redirect(array('action' => 'error'));
        }

        try {
            $data = array(
                'userEventStatus' => $this->userEventStatus,
                'barrelNumber'    => $this->params['url']['barrelNumber'],
                'eventMaster'     => $this->eventMaster,
                'targetDatetime'  => CURRENT_DATETIME,
            );
            $result = $this->EvForestFacade->cocktail_make_step1($data);
        } catch (Exception $e) {
            $this->log("file:" . __FILE__ . " function:" . __FUNCTION__ . " line:" . __LINE__ . $e);
            $this->redirect(array('action' => 'error'));
        }

        $this->set('userEventStatus',             $result['userEventStatus']);
        $this->set('eventMaster',                 $result['eventMaster']);
        $this->set('userMaterialItem1',           $result['userMaterialItem1']);
        $this->set('userEvBarrel',                $result['userEvBarrel']);
        $this->set('testProductionCocktail',      $result['testProductionCocktail']);
        $this->set('learnCocktailRemainderPoint', $result['learnCocktailRemainderPoint']);
    }

    /**
     *
     * カクテル作成ステップ2
     */
    public function cocktail_make_step2() {
        // パラメータをチェックする．
        if (empty($this->params['url']['barrelNumber'])) {
            $this->log("file:" . __FILE__ . " function:" . __FUNCTION__ . " line:" . __LINE__);
            $this->redirect(array('action' => 'error'));
        }

        try {
            $this->MultiTransaction->begin();

            $data = array(
                'userEventStatus' => $this->userEventStatus,
                'barrelNumber'    => $this->params['url']['barrelNumber'],
                'eventMaster'     => $this->eventMaster,
                'targetDatetime'  => CURRENT_DATETIME,
            );
            $result = $this->EvForestFacade->cocktail_make_step2($data);

            $this->MultiTransaction->commit();
        } catch (Exception $e) {
            $this->log("file:" . __FILE__ . " function:" . __FUNCTION__ . " line:" . __LINE__ . $e);
            $this->MultiTransaction->rollback();
            $this->redirect(array('action' => 'error'));
        }

        // 次のステータスに移行する場合
        if ($result == 'next_status') {
            $this->redirect(
                    array(
                            'action'       => 'cocktail_make_step3',
                            'barrelNumber' => $this->params['url']['barrelNumber'],
                    )
            );
        }

        $this->set('userEventStatus',             $result['userEventStatus']);
        $this->set('eventMaster',                 $result['eventMaster']);
        $this->set('shopShorteningItem',          $result['shopShorteningItem']);
        $this->set('userShorteningItem',          $result['userShorteningItem']);
        $this->set('userMaterialItem1',           $result['userMaterialItem1']);
        $this->set('userEvBarrel',                $result['userEvBarrel']);
        $this->set('remainderTime',               $result['remainderTime']);
        $this->set('testProductionCocktail',      $result['testProductionCocktail']);
        $this->set('learnCocktailRemainderPoint', $result['learnCocktailRemainderPoint']);
    }

    /**
     *
     * カクテル作成ステップ3
     */
    public function cocktail_make_step3() {
        // パラメータをチェックする．
        if (empty($this->params['url']['barrelNumber'])) {
            $this->log("file:" . __FILE__ . " function:" . __FUNCTION__ . " line:" . __LINE__);
            $this->redirect(array('action' => 'error'));
        }

        try {
            $data = array(
                'userEventStatus' => $this->userEventStatus,
                'barrelNumber'    => $this->params['url']['barrelNumber'],
                'eventMaster'     => $this->eventMaster,
                'targetDatetime'  => CURRENT_DATETIME,
            );
            $result = $this->EvForestFacade->cocktail_make_step3($data);
        } catch (Exception $e) {
            $this->log("file:" . __FILE__ . " function:" . __FUNCTION__ . " line:" . __LINE__ . $e);
            $this->MultiTransaction->rollback();
            $this->redirect(array('action' => 'error'));
        }

        $this->set('userEventStatus',             $result['userEventStatus']);
        $this->set('eventMaster',                 $result['eventMaster']);
        $this->set('userMaterialItem2',           $result['userMaterialItem2']);
        $this->set('userEvBarrel',                $result['userEvBarrel']);
        $this->set('testProductionCocktail',      $result['testProductionCocktail']);
        $this->set('learnCocktailRemainderPoint', $result['learnCocktailRemainderPoint']);
    }

    /**
     *
     * カクテル作成ステップ4
     */
    public function cocktail_make_step4() {
        // パラメータをチェックする．
        if (empty($this->params['url']['barrelNumber'])) {
            $this->log("file:" . __FILE__ . " function:" . __FUNCTION__ . " line:" . __LINE__);
            $this->redirect(array('action' => 'error'));
        }

        $pointUpItemId = false;
        // ポイントアップアイテム使用時
        if (isset($this->params['url']['pointUpItemId'])) {
            $pointUpItemId = $this->params['url']['pointUpItemId'];
        }

        try {
            $this->MultiTransaction->begin();

            $data = array(
                'userEventStatus' => $this->userEventStatus,
                'barrelNumber'    => $this->params['url']['barrelNumber'],
                'eventMaster'     => $this->eventMaster,
                'pointUpItemId'   => $pointUpItemId,
                'targetDatetime'  => CURRENT_DATETIME,
            );
            $result = $this->EvForestFacade->cocktail_make_step4($data);

            $this->MultiTransaction->commit();
        } catch (Exception $e) {
            $this->log("file:" . __FILE__ . " function:" . __FUNCTION__ . " line:" . __LINE__ . $e);
            $this->MultiTransaction->rollback();
            $this->redirect(array('action' => 'error'));
        }

        // 次のステータスに移行する場合
        if ($result == 'next_status') {
            $this->redirect(
                array(
                    'action'       => 'cocktail_make_step5_exec',
                    'barrelNumber' => $this->params['url']['barrelNumber'],
                )
            );
        }


        $this->set('userEventStatus',             $result['userEventStatus']);
        $this->set('eventMaster',                 $result['eventMaster']);
        $this->set('eventPointUpItems',           $result['eventPointUpItems']);
        $this->set('pointUpItems',                $result['pointUpItems']);
        $this->set('userMaterialItem2',           $result['userMaterialItem2']);
        $this->set('userEvBarrel',                $result['userEvBarrel']);
        $this->set('remainderTime',               $result['remainderTime']);
        $this->set('barrelPoint',                 $result['barrelPoint']);
        $this->set('testProductionCocktail',      $result['testProductionCocktail']);
        $this->set('learnCocktailRemainderPoint', $result['learnCocktailRemainderPoint']);
        $this->set('getPoint',                    $result['getPoint']);
        $this->set('usePointUpItem',              $result['usePointUpItem']);
    }

    /**
     *
     * カクテル作成ステップ5
     */
    public function cocktail_make_step5_exec() {
        // パラメータをチェックする．
        if (empty($this->params['url']['barrelNumber'])) {
            $this->log("file:" . __FILE__ . " function:" . __FUNCTION__ . " line:" . __LINE__);
            $this->redirect(array('action' => 'error'));
        }

        try {
            $this->MultiTransaction->begin();

            $data = array(
                'userEventStatus' => $this->userEventStatus,
                'barrelNumber'    => $this->params['url']['barrelNumber'],
                'eventMaster'     => $this->eventMaster,
                'targetDatetime'  => CURRENT_DATETIME,
            );
            $result = $this->EvForestFacade->cocktail_make_step5_exec($data);

            $this->MultiTransaction->commit();
        } catch (Exception $e) {
            $this->log("file:" . __FILE__ . " function:" . __FUNCTION__ . " line:" . __LINE__ . $e);
            $this->MultiTransaction->rollback();
            $this->redirect(array('action' => 'error'));
        }

        // カクテル習得が完了していない場合
        if ($result == 'cocktail_get_uncomplete') {
            $this->redirect(
                array(
                    'action' => 'cocktail_get_uncomplete',
                )
            );
        }

        // 実行結果をmemcacheに保存する．
        $memcache = new Memcache();
        $memcache->addServer(MEMCACHE_MAIN_HOST, MEMCACHE_MAIN_PORT);
        $data = array(
            'barrelNumber'          => $this->params['url']['barrelNumber'],
            'getPoint'              => $result['getPoint'],
            'beforeUserEventStatus' => $result['beforeUserEventStatus'],
            'beforeUserEvBarrel'    => $result['userEvBarrel'],
            'getPointDetails'       => $result['getPointDetails'],
        );
        $memcache->set($this->memcacheKey, $data, 0, $this->memcacheKeepAliveTime);

        // ステージをクリアしている場合
        if ($result['isStageClear'] === true) {
            // 親ステージをクリアしている場合
            if ($result['beforeUserEventStatus'][$this->userStatusModelName]['stage_id'] % 3 == 0 || $result['beforeUserEventStatus'][$this->userStatusModelName]['stage_id'] == 11) {
                // オープニングFlash
                $this->redirect_flash(Router::url(
                    array(
                        'controller' => 'flash',
                        'action'     => 'callbackFlash',
                        'file_name'  => 'events/' . $result['eventMaster']['EventMaster']['code'] . '/stage_clear/' . $result['beforeUserEventStatus'][$this->userStatusModelName]['stage_id'] . '.swf',
                        'dest_url'   => BarUtil::serializeUrlencode($result['eventMaster']['EventMaster']['code'] . '/cocktail_make_step5/'),
                    )
                ));
            }
        }
        // 親ステージをクリアしていない場合
        $this->redirect(
            array(
                'action' => 'cocktail_make_step5',
            )
        );
    }

    /**
     *
     * カクテル作成ステップ5
     */
    public function cocktail_make_step5() {
        // パラメータをチェックする．
        $memcache = new Memcache();
        $memcache->addServer(MEMCACHE_MAIN_HOST, MEMCACHE_MAIN_PORT);
        $memcache = $memcache->get($this->memcacheKey);

        // パラメータをチェックする．
        if (empty($memcache['barrelNumber']) || empty($memcache['beforeUserEventStatus']) || empty($memcache['beforeUserEvBarrel']) || empty($memcache['getPoint']) || empty($memcache['getPointDetails'])) {
            $this->log("file:" . __FILE__ . " function:" . __FUNCTION__ . " line:" . __LINE__);
            $this->redirect(array('action' => 'error'));
        }

        try {
            $data = array(
                'userEventStatus'       => $this->userEventStatus,
                'barrelNumber'          => $memcache['barrelNumber'],
                'eventMaster'           => $this->eventMaster,
                'beforeUserEventStatus' => $memcache['beforeUserEventStatus'],
                'beforeUserEvBarrel'    => $memcache['beforeUserEvBarrel'],
                'getPoint'              => $memcache['getPoint'],
                'targetDatetime'        => CURRENT_DATETIME,
            );

            $result = $this->EvForestFacade->cocktail_make_step5($data);
        } catch (Exception $e) {
            $this->log("file:" . __FILE__ . " function:" . __FUNCTION__ . " line:" . __LINE__ . $e);
            $this->redirect(array('action' => 'error'));
        }

        $this->set('beforeUserEvBarrel',           $result['beforeUserEvBarrel']);
        $this->set('userEventStatus',              $result['userEventStatus']);
        $this->set('eventMaster',                  $result['eventMaster']);
        $this->set('userEvBarrel',                 $result['userEvBarrel']);
        $this->set('getPoint',                     $result['getPoint']);
        $this->set('testProductionCocktail',       $result['testProductionCocktail']);
        $this->set('learnCocktailRemainderPoint',  $result['learnCocktailRemainderPoint']);
        $this->set('userBonusStageCheatItem',      $result['userBonusStageCheatItem']);
        $this->set('shopBonusStageCheatItem',      $result['shopBonusStageCheatItem']);
        $this->set('userMaterialItem1',            $result['userMaterialItem1']);
        $this->set('nextBonusStageIncentivePoint', $result['nextBonusStageIncentivePoint']);
        $this->set('getPointDetails'             , $memcache['getPointDetails']);
//        $this->render($result['viewName']);
        if ($result['userEventStatus'][$this->userStatusModelName]['cocktail_get_flag'] == 1) {
            $this->render('cocktail_get');
        }
    }

    /**
     *
     * 時短アイテム確認
     */
    public function shortening_item_confirm() {
        // パラメータをチェックする．
        if (empty($this->params['url']['barrelNumber'])) {
            $this->log("file:" . __FILE__ . " function:" . __FUNCTION__ . " line:" . __LINE__);
            $this->redirect(array('action' => 'error'));
        }

        try {
            $data = array(
                'userEventStatus' => $this->userEventStatus,
                'barrelNumber'    => $this->params['url']['barrelNumber'],
                'eventMaster'     => $this->eventMaster,
                'targetDatetime'  => CURRENT_DATETIME,
            );
            $result = $this->EvForestFacade->shortening_item_confirm($data);
        } catch (Exception $e) {
            $this->log("file:" . __FILE__ . " function:" . __FUNCTION__ . " line:" . __LINE__ . $e);
            $this->redirect(array('action' => 'error'));
        }

        if (isset($this->params['url']['use_count'])) {
            $this->set('item_use_count', $this->params['url']['use_count']);
        }

        $this->set('userEventStatus',            $result['userEventStatus']);
        $this->set('eventMaster',                $result['eventMaster']);
        $this->set('userEvBarrel',               $result['userEvBarrel']);
        $this->set('userShorteningItem',         $result['userShorteningItem']);
        $this->set('shopShorteningItem',         $result['shopShorteningItem']);
        $this->set('remainderMaturationEndTime', $result['remainderMaturationEndTime']);
        $this->set('testProductionCocktail',      $result['testProductionCocktail']);
        $this->set('learnCocktailRemainderPoint', $result['learnCocktailRemainderPoint']);
    }

    /**
     *
     * 時短アイテム使用
     */
    public function shortening_item_exec() {
        // パラメータをチェックする．
        if (empty($this->params['form']['barrelNumber']) || empty($this->params['form']['use_count'])) {
            $this->log("file:" . __FILE__ . " function:" . __FUNCTION__ . " line:" . __LINE__);
            $this->redirect(array('action' => 'error'));
        }

        try {
            $this->MultiTransaction->begin();

            $data = array(
                'userEventStatus' => $this->userEventStatus,
                'barrelNumber'    => $this->params['form']['barrelNumber'],
                'eventMaster'     => $this->eventMaster,
                'use_count'       => $this->params['form']['use_count'],
                'targetDatetime'  => CURRENT_DATETIME,
            );
            $result = $this->EvForestFacade->shortening_item_exec($data);

            $this->MultiTransaction->commit();
        } catch (Exception $e) {
            $this->log("file:" . __FILE__ . " function:" . __FUNCTION__ . " line:" . __LINE__ . $e);
            $this->MultiTransaction->rollback();
            $this->redirect(array('action' => 'error'));
        }

        if (strtotime($result['userEvBarrel']['UserEvBarrel']['maturation_end_time']) > strtotime(CURRENT_DATETIME)) {
            // 時短アイテム使用確認画面に遷移する．
            $this->redirect(
                array(
                    'action'       => 'shortening_item_confirm',
                    'barrelNumber' => $this->params['form']['barrelNumber'],
                    'use_count'    => $this->params['form']['use_count'],
                )
            );
        } else {
            // 次のステータスに遷移する．
            $this->redirect(
                array(
                    'action'       => 'cocktail_make_step3',
                    'barrelNumber' => $this->params['form']['barrelNumber'],
                )
            );
        }
    }

    /**
     *
     * ポイントアップアイテム使用
     */
    public function point_up_item_exec() {
        // パラメータをチェックする．
        if (empty($this->params['url']['barrelNumber']) || empty($this->params['url']['eventMasterItemId'])) {
            $this->log("file:" . __FILE__ . " function:" . __FUNCTION__ . " line:" . __LINE__);
            $this->redirect(array('action' => 'error'));
        }

        try {
            $this->MultiTransaction->begin();

            $data = array(
                'userEventStatus'   => $this->userEventStatus,
                'barrelNumber'      => $this->params['url']['barrelNumber'],
                'eventMaster'       => $this->eventMaster,
                'eventMasterItemId' => $this->params['url']['eventMasterItemId'],
                'targetDatetime'    => CURRENT_DATETIME,
            );
            $result = $this->EvForestFacade->point_up_item_exec($data);

            $this->MultiTransaction->commit();
        } catch (Exception $e) {
            $this->MultiTransaction->rollback();
            $this->log("file:" . __FILE__ . " function:" . __FUNCTION__ . " line:" . __LINE__ . $e);
            $this->redirect(array('action' => 'error'));
        }

        // 次のステータスに遷移する．
        $this->redirect(
            array(
                'action'        => 'cocktail_make_step4',
                'barrelNumber'  => $this->params['url']['barrelNumber'],
                'pointUpItemId' => $this->params['url']['eventMasterItemId'],
            )
        );
    }

    /**
     *
     * カクテル習得
     */
    public function cocktail_get() {

        try {
            $data = array(
                    'userEventStatus' => $this->userEventStatus,
                    'eventMaster'     => $this->eventMaster,
                    'targetDatetime'  => CURRENT_DATETIME,
            );
            $result = $this->EvForestFacade->cocktail_get($data);

        } catch (Exception $e) {
            $this->log("file:" . __FILE__ . " function:" . __FUNCTION__ . " line:" . __LINE__ . $e);
            $this->redirect(array('action' => 'error'));
        }

        $this->set('userEventStatus',             $result['userEventStatus']);
        $this->set('eventMaster',                 $result['eventMaster']);
        $this->set('testProductionCocktail',      $result['testProductionCocktail']);
        $this->set('learnCocktailRemainderPoint', $result['learnCocktailRemainderPoint']);
    }

    /**
     *
     * カクテル習得前実行
     */
    public function cocktail_get_before_exec() {

        try {
            $data = array(
                    'userEventStatus' => $this->userEventStatus,
                    'eventMaster'     => $this->eventMaster,
                    'targetDatetime'  => CURRENT_DATETIME,
            );
            $result = $this->EvForestFacade->cocktail_get_before_exec($data);

        } catch (Exception $e) {
            $this->log("file:" . __FILE__ . " function:" . __FUNCTION__ . " line:" . __LINE__ . $e);
            $this->redirect(array('action' => 'error'));
        }

        // 親ステージをクリアしている場合
        if ($result == 'stage_clear') {
            // ステージクリアFlash
            $this->redirect_flash(Router::url(
                    array(
                        'controller' => 'flash',
                        'action'     => 'callbackFlash',
                        'file_name'  => 'events/' . $this->eventMaster['EventMaster']['code'] . '/stage_clear/' . $this->userEventStatus[$this->userStatusModelName]['stage_id'] . '.swf',
                        'dest_url'   => BarUtil::serializeUrlencode($this->eventMaster['EventMaster']['code'] . '/cocktail_get'),
                    )
            ));
        }

        // カクテル習得実行
        $this->setAction('cocktail_get_exec');
    }

    /**
     *
     * カクテル習得実行
     */
    public function cocktail_get_exec() {

        try {
            $this->MultiTransaction->begin();

            $data = array(
                'userEventStatus' => $this->userEventStatus,
                'eventMaster'     => $this->eventMaster,
                'targetDatetime'  => CURRENT_DATETIME,
            );
            $result = $this->EvForestFacade->cocktail_get_exec($data);

            $this->MultiTransaction->commit();
        } catch (Exception $e) {
            $this->MultiTransaction->rollback();
            $this->log("file:" . __FILE__ . " function:" . __FUNCTION__ . " line:" . __LINE__ . $e);
            $this->redirect(array('action' => 'error'));
        }

        // つくるFlash
        $this->redirect_flash(Router::url(
            array(
                'controller' => 'flash',
                'action'     => 'callbackFlash',
                'file_name'  => 'events/' . $result['eventMaster']['EventMaster']['code'] . '/make/' . $result['cocktail']['Drink']['make_style'] . '.swf',
                'dest_url'   => BarUtil::serializeUrlencode($result['eventMaster']['EventMaster']['code'] . '/cocktail_get_complete/' . $result['stageId']),
            )
        ));
    }

    /**
     *
     * カクテル未習得
     */
    public function cocktail_get_uncomplete() {

        try {
            $data = array(
                'userEventStatus' => $this->userEventStatus,
                'eventMaster'     => $this->eventMaster,
                'targetDatetime'  => CURRENT_DATETIME,
            );
            $result = $this->EvForestFacade->cocktail_get_uncomplete($data);

        } catch (Exception $e) {
            $this->log("file:" . __FILE__ . " function:" . __FUNCTION__ . " line:" . __LINE__ . $e);
            $this->redirect(array('action' => 'error'));
        }

        $this->set('userEventStatus',             $result['userEventStatus']);
        $this->set('eventMaster',                 $result['eventMaster']);
        $this->set('testProductionCocktail',      $result['testProductionCocktail']);
        $this->set('learnCocktailRemainderPoint', $result['learnCocktailRemainderPoint']);
    }

    /**
     *
     * カクテル習得
     */
    public function cocktail_get_complete($stageId = false) {
        // パラメータをチェックする．
        if ($stageId === false) {
            $this->log("file:" . __FILE__ . " function:" . __FUNCTION__ . " line:" . __LINE__);
            $this->redirect(array('action' => 'error'));
        }

        try {
            $data = array(
                'userEventStatus' => $this->userEventStatus,
                'eventMaster'     => $this->eventMaster,
                'stageId'         => $stageId,
                'targetDatetime'  => CURRENT_DATETIME,
            );
            $result = $this->EvForestFacade->cocktail_get_complete($data);
        } catch (Exception $e) {
            $this->MultiTransaction->rollback();
            $this->log("file:" . __FILE__ . " function:" . __FUNCTION__ . " line:" . __LINE__ . $e);
            $this->redirect(array('action' => 'error'));
        }

        $this->set('userEventStatus', $result['userEventStatus']);
        $this->set('eventMaster',     $result['eventMaster']);
        $this->set('cocktail',        $result['cocktail']);
    }

    /**
     *
     * ボーナスステージ
     */
    public function bonus_stage() {
        // パラメータをチェックする．
        if (empty($this->params['url']['barrelNumber'])) {
            $this->log("file:" . __FILE__ . " function:" . __FUNCTION__ . " line:" . __LINE__);
            $this->redirect(array('action' => 'error'));
        }

        try {
            $data = array(
                    'eventMaster'       => $this->eventMaster,
                    'userEventStatus'   => $this->userEventStatus,
                    'barrelNumber'      => $this->params['url']['barrelNumber'],
                    'targetDatetime'    => CURRENT_DATETIME,
            );
            $result = $this->EvForestFacade->bonus_stage($data);
        } catch (Exception $e) {
            $this->log("file:" . __FILE__ . " function:" . __FUNCTION__ . " line:" . __LINE__ . " error:" . $e);
            $this->redirect(array('action' => 'error'));
        }

        // カクテル習得が完了していない場合
        if ($result == 'cocktail_get_uncomplete') {
            $this->redirect(
                    array(
                            'action' => 'cocktail_get_uncomplete',
                    )
            );
        }

        $this->set('eventMaster',                 $result['eventMaster']);
        $this->set('userEvBarrel',                $result['userEvBarrel']);
        $this->set('userEventStatus',             $result['userEventStatus']);
        $this->set('nextBonusStageIncentivePoint',$result['nextBonusStageIncentivePoint']);
        $this->set('successCount',                $result['successCount']);
        $this->set('testProductionCocktail',      $result['testProductionCocktail']);
        $this->set('learnCocktailRemainderPoint', $result['learnCocktailRemainderPoint']);
        $this->set('userBonusStageCheatItem',     $result['userBonusStageCheatItem']);
        $this->set('shopBonusStageCheatItem',     $result['shopBonusStageCheatItem']);
    }

    /**
     *
     * ボーナスステージの実行
     */
    public function bonus_stage_exec() {
        // パラメータをチェックする．
        if (empty($this->params['url']['barrelNumber'])) {
            $this->log("file:" . __FILE__ . " function:" . __FUNCTION__ . " line:" . __LINE__);
            $this->redirect(array('action' => 'error'));
        }

        // イベントアイテムマスターID
        $eventMasterItemId = 0;
        if (isset($this->params['url']['eventMasterItemId'])) {
            $eventMasterItemId = $this->params['url']['eventMasterItemId'];
        }

        try {
            $this->MultiTransaction->begin();

            $data = array(
                    'eventMaster'       => $this->eventMaster,
                    'userEventStatus'   => $this->userEventStatus,
                    'barrelNumber'      => $this->params['url']['barrelNumber'],
                    'eventMasterItemId' => $eventMasterItemId,
                    'targetDatetime'    => CURRENT_DATETIME,
            );
            $result = $this->EvForestFacade->bonus_stage_exec($data);

            $this->MultiTransaction->commit();
        } catch (Exception $e) {
            $this->MultiTransaction->rollback();
            $this->log("file:" . __FILE__ . " function:" . __FUNCTION__ . " line:" . __LINE__ . " error:" . $e);
            $this->redirect(array('action' => 'error'));
        }

        // 実行結果をmemcacheに保存する．
        $memcache = new Memcache();
        $memcache->addServer(MEMCACHE_MAIN_HOST, MEMCACHE_MAIN_PORT);
        $data = array(
            'incentive'   => $result['incentive'],
            'getPoint'    => $result['getPoint'],
            'successCount' => $result['successCount'],
        );
        $memcache->set($this->memcacheBonusStageKey, $data, 0, $this->memcacheKeepAliveTime);

        if (2 == $result['successStatus'] || 1 == $result['successStatus'] || 3 == $result['successStatus']) {
            //1：通常成功時、2：アイテム使用成功時、３：初回成功時
            // 成功した場合
            $redirectUrl = $result['eventMaster']['EventMaster']['code'] . '/bonus_stage_success';
        } else {
            // 失敗した場合
            $redirectUrl = $result['eventMaster']['EventMaster']['code'] . '/bonus_stage_failure';
        }

        $this->redirect_flash(Router::url(
            array(
                'controller' => 'flash',
                'action'     => 'callbackFlash',
                'file_name'  => 'events/' . $result['eventMaster']['EventMaster']['code'] . '/bonus_stage/' . $result['successStatus'] . '.swf',
                'dest_url'   => BarUtil::serializeUrlencode($redirectUrl),
            )
        ));
    }

    /**
     *
     * ボーナスステージに成功
     */
    public function bonus_stage_success() {
        $memcache = new Memcache();
        $memcache->addServer(MEMCACHE_MAIN_HOST, MEMCACHE_MAIN_PORT);
        $memcache = $memcache->get($this->memcacheBonusStageKey);

        try {
            $data = array(
                'eventMaster'     => $this->eventMaster,
                'userEventStatus' => $this->userEventStatus,
                'getPoint'        => $memcache['getPoint'],
                'incentive'       => $memcache['incentive'],
                'successCount'     => $memcache['successCount'],
                'targetDatetime'  => CURRENT_DATETIME,
            );
            $result = $this->EvForestFacade->bonus_stage_success($data);
        } catch (Exception $e) {
            $this->log("file:" . __FILE__ . " function:" . __FUNCTION__ . " line:" . __LINE__ . " error:" . $e);
            $this->redirect(array('action' => 'error'));
        }

        $this->set('eventMaster',                 $result['eventMaster']);
        $this->set('userEventStatus',             $result['userEventStatus']);
        $this->set('incentive',                   $result['incentive']);
        $this->set('getPoint',                    $result['getPoint']);
        $this->set('successCount',                $result['successCount']);
        $this->set('testProductionCocktail',      $result['testProductionCocktail']);
        $this->set('learnCocktailRemainderPoint', $result['learnCocktailRemainderPoint']);
    }

    /**
     *
     * ボーナスステージに失敗
     */
    public function bonus_stage_failure() {
        try {
            $data = array(
                'eventMaster'     => $this->eventMaster,
                'userEventStatus' => $this->userEventStatus,
                'targetDatetime'  => CURRENT_DATETIME,
            );
            $result = $this->EvForestFacade->bonus_stage_failure($data);
        } catch (Exception $e) {
            $this->log("file:" . __FILE__ . " function:" . __FUNCTION__ . " line:" . __LINE__ . " error:" . $e);
            $this->redirect(array('action' => 'error'));
        }
        $this->set('eventMaster',                 $result['eventMaster']);
        $this->set('userEventStatus',             $result['userEventStatus']);
        $this->set('testProductionCocktail',      $result['testProductionCocktail']);
        $this->set('learnCocktailRemainderPoint', $result['learnCocktailRemainderPoint']);
    }

    /**
     *
     * ボーナスステージ説明
     */
    public function bonus_stage_explain() {
    }

    /**
    *
    * ボーナスｱｲﾃﾑ説明
    */
    public function bonus_item() {
        try {
            $data = array(
                'eventMaster' => $this->eventMaster,
                'type' => 'special_stage',
            );
            $result = $this->EvForestFacade->bonus_item($data);
        } catch (Exception $e) {
            $this->log("file:" . __FILE__ . " function:" . __FUNCTION__ . " line:" . __LINE__ . " error:" . $e);
            $this->redirect(array('action' => 'error'));
        }

        $this->set('specialStageOpenFlag', $result['specialStageOpenFlag']);
        $this->set('userEventStatus', $this->userEventStatus);
    }

    /**
    *
    * ボーナスｱｲﾃﾑ設置イメージ
    */
    public function installation_sample() {
    }

    /**
    *
    * 前回アイテム売却の確認
    */
    public function item_sellout_confirm() {
        try {
            $data = array(
                    'eventMaster'    => $this->eventMaster,
                    'eventStatus'    => $this->userEventStatus,
                    'targetDatetime' => CURRENT_DATETIME,
            );
            $result = $this->EvForestFacade->item_sellout_confirm($data);
        } catch (Exception $e) {
            $this->log("file:" . __FILE__ . " function:" . __FUNCTION__ . " line:" . __LINE__ . " error:" . $e);
            $this->redirect(array('action' => 'error'));
        }

        $this->set('eventMaster',       $result['eventMaster']);
        $this->set('eventStatus',       $result['eventStatus']);
        $this->set('selloutEventitems', $result['selloutEventitems']);
    }

    /**
    *
    * 前回アイテム売却の実行
    */
    public function item_sellout_exec() {
        try {
            $data = array(
                    'eventMaster'    => $this->eventMaster,
                    'eventStatus'    => $this->userEventStatus,
                    'targetDatetime' => CURRENT_DATETIME,
            );
            $result = $this->EvForestFacade->item_sellout_exec($data);
        } catch (Exception $e) {
            $this->log("file:" . __FILE__ . " function:" . __FUNCTION__ . " line:" . __LINE__ . " error:" . $e);
            $this->redirect(array('action' => 'error'));
        }

        $data = array(
                'beforeTender' => $result['beforeTender'],
                'afterTender'  => $result['afterTender'],
        );

        // 結果をmemcacheに保存
        $memcache = new Memcache();
        $memcache->addServer(MEMCACHE_MAIN_HOST, MEMCACHE_MAIN_PORT);
        $memcache->set($this->userEventStatus['UserEvForestStatus']['owner_id'] . '_item_sellout', $data, 0, DAY);

        $this->redirect('item_sellout_complete');
    }

    /**
    *
    * 前回アイテム売却の完了
    */
    public function item_sellout_complete() {
        $memcache = new Memcache();
        $memcache->addServer(MEMCACHE_MAIN_HOST, MEMCACHE_MAIN_PORT);
        $memcacheData = $memcache->get($this->userEventStatus['UserEvForestStatus']['owner_id'] . '_item_sellout');

        // キャッシュデータがない場合
        if (empty($memcacheData)) {
            $this->log("file:" . __FILE__ . " function:" . __FUNCTION__ . " line:" . __LINE__ . " error:" . $e);
            $this->redirect(array('action' => 'error'));
        }

        $this->set('beforeTender', $memcacheData['beforeTender']);
        $this->set('afterTender',  $memcacheData['afterTender']);
    }

    /**
    *
    * エンディングストーリー
    */
    public function ending_story() {
        // 最終ステージをクリアしていない場合
        if ($this->userEventStatus['UserEvForestStatus']['special_stage_flag'] !== true) {
            $this->log("file:" . __FILE__ . " function:" . __FUNCTION__ . " line:" . __LINE__ . " error:" . $e);
            $this->redirect(array('action' => 'error'));
        }

        try {
            $data = array(
                    'eventMaster'    => $this->eventMaster,
                    'targetDatetime' => CURRENT_DATETIME,
            );
            $result = $this->EvForestFacade->ending_story($data);
        } catch (Exception $e) {
            $this->log("file:" . __FILE__ . " function:" . __FUNCTION__ . " line:" . __LINE__ . " error:" . $e);
            $this->redirect(array('action' => 'error'));
        }

        $this->set('isSpecialStage', $result['isSpecialStage']);
    }

    /**
     *
     * エンディング1
     */
    public function ending1() {
        $this->redirect_flash(Router::url(
            array(
                'controller' => 'flash',
                'action'     => 'callbackFlash',
                'file_name'  => 'events/' . $this->eventMaster['EventMaster']['code'] . '/ending1.swf',
                'dest_url'   => BarUtil::serializeUrlencode($this->eventMaster['EventMaster']['code'] . '/my_page/'),
            )
        ));
    }

    /**
     *
     * エンディング2
     */
    public function ending2() {
        $this->redirect_flash(Router::url(
            array(
                'controller' => 'flash',
                'action'     => 'callbackFlash',
                'file_name'  => 'events/' . $this->eventMaster['EventMaster']['code'] . '/ending2.swf',
                'dest_url'   => BarUtil::serializeUrlencode($this->eventMaster['EventMaster']['code'] . '/my_page/'),
            )
        ));
    }

    /**
     *
     * アイテム説明
     */
    public function item_explain() {
    }

    /**
     *
     * アイテム取得説明
     */
    public function item_get_explain() {
        try {
            $data = array(
                'eventMaster'    => $this->eventMaster,
                'eventStatus'    => $this->userEventStatus,
                'targetDatetime' => CURRENT_DATETIME,
            );
            $result = $this->EvForestFacade->item_get_explain($data);
        } catch (Exception $e) {
            $this->log("file:" . __FILE__ . " function:" . __FUNCTION__ . " line:" . __LINE__ . " error:" . $e);
            $this->redirect(array('action' => 'error'));
        }

        $this->set('isBarrelHavingMax', $result['isBarrelHavingMax']);
    }

    /**
     *
     * 遊び方説明
     */
    public function play_explain() {
            $data = array(
                    'eventMasterId' =>$this->eventMaster['EventMaster']['id'],
                    'targetDatetime' => CURRENT_DATETIME,
            );
            $isDuringSpecialStage = $this->EvForestFacade->isDuringSpecialStage($data);
            $this->set('isDuringSpecialStage', $isDuringSpecialStage);
    }

    /**
     *
     * イベントＱＡ
     */
    public function help($page = 0) {
        if (empty($page)) {
            // 基本ＱＡのインデックス表示
            $page = 'index';
        }
        $this->render('help/' . $page);
    }

    /**
     *
     * エラーページ
     */
    public function error() {
    }

}

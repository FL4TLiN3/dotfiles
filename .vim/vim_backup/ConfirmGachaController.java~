package jp.co.talentmedia.kyabatuku.controller.payment;

import java.util.List;

import jp.co.talentmedia.TENGA.controller.AbstractJsonController;
import jp.co.talentmedia.TENGA.exception.ApiException;
import jp.co.talentmedia.TENGA.exception.Code;
import jp.co.talentmedia.kyabatuku.model.GachaEvent;
import jp.co.talentmedia.kyabatuku.model.PaymentInfo;
import jp.co.talentmedia.kyabatuku.model.UserAuth;
import jp.co.talentmedia.kyabatuku.service.common.ameba.AuthService;
import jp.co.talentmedia.kyabatuku.service.common.ameba.PaymentService;
import jp.co.talentmedia.kyabatuku.service.gacha.GachaService;
import jp.co.talentmedia.kyabatuku.util.Constant;
import jp.co.talentmedia.kyabatuku.util.Crypt;
import jp.co.talentmedia.kyabatuku.util.ServerUtil;

public class ConfirmGachaController extends AbstractJsonController {
    private String paymentId;
    private String status;
    private String appId;
    private String userId;
    private Long userNo;
    private String orderedTime;
    private String paymentMethod;
    private PaymentInfo paymentInfo;
    
    public void setPaymentId(String paymentId) { this.paymentId = paymentId; }
    public void setStatus(String status) { this.status = status; }
    public void setAppId(String appId) { this.appId = appId; }
    public void setUserId(String userId) { this.userId = userId; }
    public void setUserNo(Long userNo) { this.userNo = userNo; }
    public void setOrderedTime(String orderedTime) { this.orderedTime = orderedTime; }
    public void setPaymentMethod(String paymentMethod) { this.paymentMethod = paymentMethod; }

    private GachaService gachaService = GachaService.getInstance();

    @Override
    public void get() {
        logging.debug("{paymentId:" + paymentId + ", status:" + status + ", appId:" + appId + ", userId:" + userId
                + ", orderedTime:" + orderedTime + ", paymentMethod:" + paymentMethod);
        PaymentInfo pi = new PaymentInfo();
        if (!ServerUtil.isLocalhost()) {
            if (hasAuthorizedHeader()) {
                UserAuth userAuth = AuthService.getInstance().findUserAuth(userId);
                pi.setPaymentId(paymentId);
                pi.setUserNo(userAuth.getUserNo());
                paymentInfo = PaymentService.getInstance().getPaymentGacha(paymentId, userId, pi);
                if (paymentInfo == null || paymentInfo.getStatus() == null)
                    throw new ApiException(Code.E500);
                if (1 == paymentInfo.getStatus().longValue() || 2 == paymentInfo.getStatus().longValue()) {
                    selectPrize();
                } else if (3 == paymentInfo.getStatus().longValue())
                    throw new ApiException(Code.E400);
                paymentInfo.save();
                push();
            } else
                throw new ApiException(Code.E401);
        } else {
            pi.setPaymentId(paymentId);
            pi.setUserNo(userNo);
            paymentInfo = PaymentService.getInstance().getPaymentGacha(paymentId, userId, pi);
<<<<<<< HEAD
            selectPrize();
            paymentInfo.save();
            push();
        }
=======
            if (paymentInfo == null || paymentInfo.getStatus() == null)
                throw new ApiException(Code.E500);
            if (1 == paymentInfo.getStatus().longValue() || 2 == paymentInfo.getStatus().longValue()) {
                selectPrize();
            } else if (3 == paymentInfo.getStatus().longValue())
                throw new ApiException(Code.E400);
        } else
            throw new ApiException(Code.E401);
>>>>>>> 94264d7691e80ac3a3d920ab7321a655f9ef8912
    }
    @Override
    public void post() {
        throw new ApiException(Code.E405);
    }
    @Override
    public void delete() {
        throw new ApiException(Code.E405);
    }

    private boolean hasAuthorizedHeader() {
        if ("localhost".equalsIgnoreCase(request.getServerName())) return true;
        String authorization = request.getHeader("Authorization");
        if (authorization != null && !authorization.isEmpty()) {
            String hashed = Crypt.getSignature(Constant.CLIENT_SECRET, paymentId);
            if (authorization.equals(hashed)) {
                return true;
            }
        }
        return false;
    }
    private void selectPrize() {
        GachaEvent event = gachaService.findGachaEventByManageNo(paymentInfo.getManageNo());
        Long userNo = paymentInfo.getUserNo();
        try {
            List<String> keys = gachaService.lottery(userNo, event, event.getNumber());
            paymentInfo.getPrizeIds().addAll(keys);
            paymentInfo.setPaymentMethod(paymentMethod);
            paymentInfo.save();
        } catch (ApiException e) {
            logging.warn(e);
            throw e;
        }
    }
    private void push() {
        Queue queue = QueueFactory.getQueue("paymentqueue");
        queue.add(TaskOptions.Builder.withUrl("/payment/distributeItem")
                .param("paymentId", paymentId)
                .method(Method.GET)
                );
    }
}
